{"/home/travis/build/npmtest/node-npmtest-session-file-store/test.js":"/* istanbul instrument in package npmtest_session_file_store */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-session-file-store/lib.npmtest_session_file_store.js":"/* istanbul instrument in package npmtest_session_file_store */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_session_file_store = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_session_file_store = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-session-file-store/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-session-file-store && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_session_file_store */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_session_file_store\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_session_file_store.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_session_file_store.rollup.js'] =\n            local.assetsDict['/assets.npmtest_session_file_store.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_session_file_store.__dirname + '/lib.npmtest_session_file_store.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-session-file-store/node_modules/session-file-store/index.js":"module.exports = function(session) {\n  return require('./lib/session-file-store')(session);\n};\n","/home/travis/build/npmtest/node-npmtest-session-file-store/node_modules/session-file-store/lib/reap-worker.js":"#!/usr/bin/env node\n\nvar helpers = require('./session-file-helpers');\n\nvar options = helpers.defaults({\n  path: process.argv[2],\n  ttl: process.argv[3]\n});\n\nif (options.path) {\n  options.logFn('[session-file-store:worker] Deleting expired sessions');\n  helpers.reap(options);\n} else {\n  options.logFn('[session-file-store:worker] Reap worker started with invalid path');\n  process.exit(1);\n}\n","/home/travis/build/npmtest/node-npmtest-session-file-store/node_modules/session-file-store/lib/session-file-helpers.js":"var fs = require('fs-extra');\nvar writeFileAtomic = require('write-file-atomic');\nvar path = require('path');\nvar retry = require('retry');\nvar childProcess = require('child_process');\nvar Bagpipe = require('bagpipe');\nvar crypto = require('crypto');\nvar isWindows = process.platform === 'win32';\n\nvar helpers = {\n\n  encAlgorithm: 'aes-256-ctr',\n\n  isSecret: function (secret) {\n    return secret !== undefined && secret != null;\n  },\n\n  sessionPath: function (options, sessionId) {\n    //return path.join(basepath, sessionId + '.json');\n    return path.join(options.path, sessionId + options.fileExtension);\n  },\n\n  sessionId: function (options, file) {\n    //return file.substring(0, file.lastIndexOf('.json'));\n    if ( options.fileExtension.length === 0 ) return file;\n    var id = file.replace(options.filePattern, '');\n    return id === file ? '' : id;\n  },\n\n  getLastAccess: function (session) {\n    return session.__lastAccess;\n  },\n\n  setLastAccess: function (session) {\n    session.__lastAccess = new Date().getTime();\n  },\n\n  escapeForRegExp: function (str) {\n    return str.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n  },\n\n  getFilePatternFromFileExtension: function (fileExtension) {\n    return new RegExp( helpers.escapeForRegExp(fileExtension) + '$' );\n  },\n\n  defaults: function (options) {\n    options = options || {};\n\n    var NOOP_FN = function () {\n    };\n\n    var KEY_FN = function (secret, sessionId) {\n      return secret + sessionId;\n    };\n\n    return {\n      path: path.normalize(options.path || './sessions'),\n      ttl: options.ttl || 3600,\n      retries: options.retries || 5,\n      factor: options.factor || 1,\n      minTimeout: options.minTimeout || 50,\n      maxTimeout: options.maxTimeout || 100,\n      reapInterval: options.reapInterval || 3600,\n      reapMaxConcurrent: options.reapMaxConcurrent || 10,\n      reapAsync: options.reapAsync || false,\n      reapSyncFallback: options.reapSyncFallback || false,\n      logFn: options.logFn || console.log || NOOP_FN,\n      fallbackSessionFn: options.fallbackSessionFn,\n      encoding: options.encoding !== undefined\n        ? options.encoding\n        : 'utf8',\n      encoder: options.encoder || JSON.stringify,\n      decoder: options.decoder || JSON.parse,\n      secret: options.secret,\n      encryptEncoding: options.encryptEncoding !== undefined\n        ? options.encryptEncoding\n        : 'hex',\n      fileExtension: options.fileExtension || '.json',\n      filePattern: options.fileExtension\n        ? helpers.getFilePatternFromFileExtension(options.fileExtension)\n        : /\\.json$/,\n      keyFunction: options.keyFunction || KEY_FN\n    };\n  },\n\n  destroyIfExpired: function (sessionId, options, callback) {\n    helpers.expired(sessionId, options, function (err, expired) {\n      if (err == null && expired) {\n        helpers.destroy(sessionId, options, callback);\n      } else if (callback) {\n        err ? callback(err) : callback();\n      }\n    });\n  },\n\n  scheduleReap: function (options) {\n    if (options.reapInterval !== -1) {\n      options.reapIntervalObject = setInterval(function () {\n        if (options.reapAsync) {\n          options.logFn('[session-file-store] Starting reap worker thread');\n          helpers.asyncReap(options);\n        } else {\n          options.logFn('[session-file-store] Deleting expired sessions');\n          helpers.reap(options);\n        }\n      }, options.reapInterval * 1000);\n    }\n  },\n\n  asyncReap: function (options, callback) {\n    callback || (callback = function () {\n    });\n\n    function execCallback(err) {\n      if (err && options.reapSyncFallback) {\n        helpers.reap(options, callback);\n      } else {\n        err ? callback(err) : callback();\n      }\n    }\n\n    if (isWindows) {\n      childProcess.execFile('node', [path.join(__dirname, 'reap-worker.js'), options.path, options.ttl], execCallback);\n    } else {\n      childProcess.execFile(path.join(__dirname, 'reap-worker.js'), [options.path, options.ttl], execCallback);\n    }\n  },\n\n  reap: function (options, callback) {\n    callback || (callback = function () {\n    });\n    helpers.list(options, function (err, files) {\n      if (err) return callback(err);\n      if (files.length === 0) return callback();\n\n      var bagpipe = new Bagpipe(options.reapMaxConcurrent);\n\n      var errors = [];\n      files.forEach(function (file, i) {\n        bagpipe.push(helpers.destroyIfExpired,\n            helpers.sessionId(options,file),\n            options,\n            function (err) {\n              if (err) {\n                errors.push(err);\n              }\n              if (i >= files.length - 1) {\n                errors.length > 0 ? callback(errors) : callback();\n              }\n            });\n      });\n    });\n  },\n\n  /**\n   * Attempts to fetch session from a session file by the given `sessionId`\n   *\n   * @param  {String}   sessionId\n   * @param  {Object}   options\n   * @param  {Function} callback\n   *\n   * @api public\n   */\n  get: function (sessionId, options, callback) {\n    var sessionPath = helpers.sessionPath(options, sessionId);\n\n    var operation = retry.operation({\n      retries: options.retries,\n      factor: options.factor,\n      minTimeout: options.minTimeout,\n      maxTimeout: options.maxTimeout\n    });\n\n    operation.attempt(function () {\n\n      fs.readFile(sessionPath, helpers.isSecret(options.secret) && !options.encryptEncoding ? null : options.encoding, function readCallback(err, data) {\n\n        if (!err) {\n          var json;\n          try {\n            json = options.decoder(helpers.isSecret(options.secret) ? helpers.decrypt(options, data, sessionId) : data);\n          } catch (parseError) {\n            return fs.remove(sessionPath, function (removeError) {\n              if (removeError) {\n                return callback(removeError);\n              }\n\n              callback(parseError);\n            });\n          }\n          if (!err) {\n            return callback(null, helpers.isExpired(json, options) ? null : json);\n          }\n        }\n\n        if (operation.retry(err)) {\n          options.logFn('[session-file-store] will retry, error on last attempt: ' + err);\n        } else if (options.fallbackSessionFn) {\n          var session = options.fallbackSessionFn(sessionId);\n          helpers.setLastAccess(session);\n          callback(null, session);\n        } else {\n          callback(err);\n        }\n      });\n    });\n  },\n\n  /**\n   * Attempts to commit the given `session` associated with the given `sessionId` to a session file\n   *\n   * @param {String}   sessionId\n   * @param {Object}   session\n   * @param  {Object}  options\n   * @param {Function} callback (optional)\n   *\n   * @api public\n   */\n  set: function (sessionId, session, options, callback) {\n    try {\n      helpers.setLastAccess(session);\n\n      var sessionPath = helpers.sessionPath(options, sessionId);\n      var json = options.encoder(session);\n      if (helpers.isSecret(options.secret)) {\n        json = helpers.encrypt(options, json, sessionId)\n      }\n      writeFileAtomic(sessionPath, json, function (err) {\n        if (callback) {\n          err ? callback(err) : callback(null, session);\n        }\n      });\n    } catch (err) {\n      if (callback) callback(err);\n    }\n  },\n\n  /**\n   * Attempts to unlink a given session by its id\n   *\n   * @param  {String}   sessionId   Files are serialized to disk by their sessionId\n   * @param  {Object}   options\n   * @param  {Function} callback\n   *\n   * @api public\n   */\n  destroy: function (sessionId, options, callback) {\n    var sessionPath = helpers.sessionPath(options, sessionId);\n    fs.remove(sessionPath, callback);\n  },\n\n  /**\n   * Attempts to fetch number of the session files\n   *\n   * @param  {Object}   options\n   * @param  {Function} callback\n   *\n   * @api public\n   */\n  length: function (options, callback) {\n    fs.readdir(options.path, function (err, files) {\n      if (err) return callback(err);\n\n      var result = 0;\n      files.forEach(function (file) {\n        if (options.filePattern.exec(file)) {\n          ++result;\n        }\n      });\n\n      callback(null, result);\n    });\n  },\n\n  /**\n   * Attempts to clear out all of the existing session files\n   *\n   * @param  {Object}   options\n   * @param  {Function} callback\n   *\n   * @api public\n   */\n  clear: function (options, callback) {\n    fs.readdir(options.path, function (err, files) {\n      if (err) return callback([err]);\n      if (files.length <= 0) return callback();\n\n      var errors = [];\n      files.forEach(function (file, i) {\n        if (options.filePattern.exec(file)) {\n          fs.remove(path.join(options.path, file), function (err) {\n            if (err) {\n              errors.push(err);\n            }\n            // TODO: wrong call condition (call after all completed attempts to remove instead of after completed attempt with last index)\n            if (i >= files.length - 1) {\n              errors.length > 0 ? callback(errors) : callback();\n            }\n          });\n        } else {\n          // TODO: wrong call condition (call after all completed attempts to remove instead of after completed attempt with last index)\n          if (i >= files.length - 1) {\n            errors.length > 0 ? callback(errors) : callback();\n          }\n        }\n      });\n    });\n  },\n\n  /**\n   * Attempts to find all of the session files\n   *\n   * @param  {Object}   options\n   * @param  {Function} callback\n   *\n   * @api public\n   */\n  list: function (options, callback) {\n    fs.readdir(options.path, function (err, files) {\n      if (err) return callback(err);\n\n      files = files.filter(function (file) {\n        return options.filePattern.exec(file);\n      });\n\n      callback(null, files);\n    });\n  },\n\n  /**\n   * Attempts to detect whether a session file is already expired or not\n   *\n   * @param  {String}   sessionId\n   * @param  {Object}   options\n   * @param  {Function} callback\n   *\n   * @api public\n   */\n  expired: function (sessionId, options, callback) {\n    helpers.get(sessionId, options, function (err, session) {\n      if (err) return callback(err);\n\n      err ? callback(err) : callback(null, helpers.isExpired(session, options));\n    });\n  },\n\n  isExpired: function (session, options) {\n    if (!session) return true;\n\n    var ttl = session.cookie && session.cookie.originalMaxAge ? session.cookie.originalMaxAge : options.ttl * 1000;\n    return !ttl || helpers.getLastAccess(session) + ttl < new Date().getTime();\n  },\n\n  encrypt: function (options, data, sessionId) {\n    var cipher = crypto.createCipher(helpers.encAlgorithm, options.keyFunction(options.secret, sessionId));\n    var crypted = cipher.update(data, options.encoding, options.encryptEncoding );\n    var cryptedFinal = cipher.final(options.encryptEncoding);\n    if ( typeof cryptedFinal === 'string' ) {\n      crypted += cryptedFinal;\n    } else {\n      crypted = Buffer.concat([crypted, cryptedFinal], crypted.length + cryptedFinal.length);\n    }\n    return crypted;\n  },\n\n  decrypt: function (options, data, sessionId) {\n    var decipher = crypto.createDecipher(helpers.encAlgorithm, options.keyFunction(options.secret, sessionId));\n    var dec = decipher.update(data, options.encryptEncoding, options.encoding);\n    var decFinal = decipher.final(options.encoding);\n    if ( typeof decFinal === 'string' ) {\n      dec += decFinal;\n    } else {\n      dec = Buffer.concat([dec, decFinal], dec.length + decFinal.length);\n    }\n    return dec;\n  }\n};\n\nmodule.exports = helpers;\n","/home/travis/build/npmtest/node-npmtest-session-file-store/node_modules/session-file-store/lib/session-file-store.js":"var helpers = require('./session-file-helpers');\nvar fs = require('fs-extra');\n\n/**\n * https://github.com/expressjs/session#session-store-implementation\n *\n * @param {object} session  express session\n * @return {Function} the `FileStore` extending `express`'s session Store\n *\n * @api public\n */\nmodule.exports = function (session) {\n  var Store = session.Store;\n\n  /**\n   * Initialize FileStore with the given `options`\n   *\n   * @param {Object} options (optional)\n   *\n   * @api public\n   */\n  function FileStore(options) {\n    var self = this;\n\n    options = options || {};\n    Store.call(self, options);\n\n    self.options = helpers.defaults(options);\n    fs.mkdirsSync(self.options.path);\n    helpers.scheduleReap(self.options);\n    options.reapIntervalObject = self.options.reapIntervalObject;\n  }\n\n  /**\n   * Inherit from Store\n   */\n  FileStore.prototype.__proto__ = Store.prototype;\n\n  /**\n   * Attempts to fetch session from a session file by the given `sessionId`\n   *\n   * @param  {String}   sessionId\n   * @param  {Function} callback\n   *\n   * @api public\n   */\n  FileStore.prototype.get = function (sessionId, callback) {\n    helpers.get(sessionId, this.options, callback);\n  };\n\n  /**\n   * Attempts to commit the given session associated with the given `sessionId` to a session file\n   *\n   * @param {String}   sessionId\n   * @param {Object}   session\n   * @param {Function} callback (optional)\n   *\n   * @api public\n   */\n  FileStore.prototype.set = function (sessionId, session, callback) {\n    helpers.set(sessionId, session, this.options, callback);\n  };\n\n  /**\n   * Touch the given session object associated with the given `sessionId`\n   *\n   * @param {string} sessionId\n   * @param {object} session\n   * @param {function} callback\n   *\n   * @api public\n   */\n\n  FileStore.prototype.touch = function (sessionId, session, callback) {\n    // will update last access time\n    helpers.set(sessionId, session, this.options, callback);\n  };\n\n  /**\n   * Attempts to unlink a given session by its id\n   *\n   * @param  {String}   sessionId   Files are serialized to disk by their\n   *                                sessionId\n   * @param  {Function} callback\n   *\n   * @api public\n   */\n  FileStore.prototype.destroy = function (sessionId, callback) {\n    helpers.destroy(sessionId, this.options, callback);\n  };\n\n  /**\n   * Attempts to fetch number of the session files\n   *\n   * @param  {Function} callback\n   *\n   * @api public\n   */\n  FileStore.prototype.length = function (callback) {\n    helpers.length(this.options, callback);\n  };\n\n  /**\n   * Attempts to clear out all of the existing session files\n   *\n   * @param  {Function} callback\n   *\n   * @api public\n   */\n  FileStore.prototype.clear = function (callback) {\n    helpers.clear(this.options, callback);\n  };\n\n  /**\n   * Attempts to find all of the session files\n   *\n   * @param  {Function} callback\n   *\n   * @api public\n   */\n  FileStore.prototype.list = function (callback) {\n    helpers.list(this.options, callback);\n  };\n\n  /**\n   * Attempts to detect whether a session file is already expired or not\n   *\n   * @param  {String}   sessionId\n   * @param  {Function} callback\n   *\n   * @api public\n   */\n  FileStore.prototype.expired = function (sessionId, callback) {\n    helpers.expired(sessionId, this.options, callback);\n  };\n\n  return FileStore;\n};\n"}